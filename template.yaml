AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Java 21 E-commerce API with Cognito Authentication

Globals:
  Function:
    Runtime: java21
    Timeout: 15
    MemorySize: 512

  Api:
    Name: EcommerceAPI
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  # === Cognito User Pool ===
  EcommerceUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: EcommerceUserPool
      MfaConfiguration: OFF
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  EcommerceUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref EcommerceUserPool
      ClientName: EcommerceClient
      GenerateSecret: false
      RefreshTokenValidity: 30
      AccessTokenValidity: 1

  # === Cognito Authorizer for API Gateway ===
  EcommerceApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ServerlessRestApi
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt EcommerceUserPool.Arn

  # === DynamoDB Tables ===
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products1
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders1
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # === API Gateway ===
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: EcommerceAPI
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: EcommerceApiAuthorizer
        Authorizers:
          EcommerceApiAuthorizer:
            UserPoolArn: !GetAtt EcommerceUserPool.Arn
            Identity:
              Header: Authorization

  # === ProductHandler Lambda Function ===
  ProductHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: miu.edu.cs516.handlers.ProductHandler::handleRequest
      CodeUri: .
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        GetAllProducts:
          Type: Api
          Properties:
            Path: /products
            Method: GET
        GetProductById:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: GET

  # === OrderHandler Lambda Function ===
  OrderHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: miu.edu.cs516.handlers.OrderHandler::handleRequest
      CodeUri: .
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        PostOrder:
          Type: Api
          Properties:
            Path: /orders
            Method: POST
            Auth:
              Authorizer: EcommerceApiAuthorizer

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
